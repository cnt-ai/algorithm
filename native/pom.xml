<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>algorithm</artifactId>
        <groupId>cn.cstn.algorithm</groupId>
        <version>1.0.0</version>
    </parent>
    <artifactId>native</artifactId>

    <properties>
        <javacpp.build.skip>false</javacpp.build.skip>
        <native.classifier>${javacpp.platform}${javacpp.platform.extension}</native.classifier>
        <javacpp.platform>${os.name}-${os.arch}</javacpp.platform>
        <!--suppress CheckTagEmptyBody -->
        <javacpp.platform.extension></javacpp.platform.extension>
        <javacpp.platform.properties>${javacpp.platform}</javacpp.platform.properties>
        <javacpp.platform.linux-armhf>linux-armhf</javacpp.platform.linux-armhf>
        <javacpp.platform.linux-arm64>linux-arm64</javacpp.platform.linux-arm64>
        <javacpp.platform.linux-x86_64>linux-x86_64</javacpp.platform.linux-x86_64>
        <javacpp.platform.macosx-arm64>macosx-arm64</javacpp.platform.macosx-arm64>
        <javacpp.platform.macosx-x86_64>macosx-x86_64</javacpp.platform.macosx-x86_64>
        <javacpp.platform.windows-x86_64>windows-x86_64</javacpp.platform.windows-x86_64>
        <javacpp.platform.linux-armhf.extension>linux-armhf${javacpp.platform.extension}
        </javacpp.platform.linux-armhf.extension>
        <javacpp.platform.linux-arm64.extension>linux-arm64${javacpp.platform.extension}
        </javacpp.platform.linux-arm64.extension>
        <javacpp.platform.linux-x86_64.extension>linux-x86_64${javacpp.platform.extension}
        </javacpp.platform.linux-x86_64.extension>
        <javacpp.platform.macosx-arm64.extension>macosx-arm64${javacpp.platform.extension}
        </javacpp.platform.macosx-arm64.extension>
        <javacpp.platform.macosx-x86_64.extension>macosx-x86_64${javacpp.platform.extension}
        </javacpp.platform.macosx-x86_64.extension>
        <javacpp.platform.windows-x86_64.extension>windows-x86_64${javacpp.platform.extension}
        </javacpp.platform.windows-x86_64.extension>
        <dist.download.folder>${project.build.directory}/dist</dist.download.folder>
        <bazel.build.skip>false</bazel.build.skip>

        <native.include.dir>${project.basedir}/../bazel-${project.parent.artifactId}</native.include.dir>
        <native.include.src.dir>${native.include.dir}/native/src/main/native/cn/cstn/algorithm/javacpp
        </native.include.src.dir>
        <native.include.external.dir>${native.include.dir}/external</native.include.external.dir>
        <native.lib.dir>${project.basedir}/../bazel-bin</native.lib.dir>
        <native.lib.src.dir>${native.lib.dir}/native/src/main/native/cn/cstn/algorithm/javacpp</native.lib.src.dir>
        <native.lib.external.dir>${native.lib.dir}/external</native.lib.external.dir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>javacpp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.scijava</groupId>
            <artifactId>native-lib-loader</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <!-- Do a full native build using Bazel -->
        <profile>
            <id>native-build-skip</id>
            <activation>
                <property>
                    <name>native.build.skip</name>
                </property>
            </activation>
            <properties>
                <bazel.build.skip>true</bazel.build.skip>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>bazel-build</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <skip>${bazel.build.skip}</skip>
                            <executable>bash</executable>
                            <arguments>
                                <argument>../bazel/build.sh</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.7.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>cn.cstn.algorithm.javacpp.NativeDemo</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.bytedeco</groupId>
                <artifactId>javacpp</artifactId>
                <version>${javacpp.version}</version>
                <configuration>
                    <properties>${javacpp.platform.properties}</properties>
                    <propertyKeysAndValues>
                        <property>
                            <name>platform.root</name>
                            <value>${javacpp.platform.root}</value>
                        </property>
                        <property>
                            <name>platform.compiler</name>
                            <value>${javacpp.platform.compiler}</value>
                        </property>
                        <property>
                            <name>platform.extension</name>
                            <value>${javacpp.platform.extension}</value>
                        </property>
                    </propertyKeysAndValues>
                    <classPath>${project.build.outputDirectory}</classPath>
                    <compilerOptions>
                        <compilerOption>-fPIE</compilerOption>
                    </compilerOptions>
                    <copyLibs>true</copyLibs>
                    <includePaths>
                        <includePath>${dist.download.folder}/include/</includePath>
                        <includePath>${native.include.src.dir}</includePath>
                        <includePath>${native.include.external.dir}/com_dtera_heu</includePath>
                        <includePath>${native.include.external.dir}/yacl</includePath>
                        <includePath>${native.include.external.dir}/com_google_absl</includePath>
                        <includePath>${native.lib.external.dir}/com_github_fmtlib_fmt/fmtlib/include</includePath>
                        <includePath>${native.lib.external.dir}/com_github_gabime_spdlog/spdlog/include</includePath>
                        <includePath>${native.lib.external.dir}/com_github_msgpack_msgpack/msgpack/include</includePath>
                        <includePath>${native.lib.external.dir}/com_github_libtom_libtommath/libtommath/include
                        </includePath>
                    </includePaths>
                    <linkPaths>
                        <linkPath>${dist.download.folder}/</linkPath>
                        <linkPath>${dist.download.folder}/lib/</linkPath>
                        <!-- additional link paths in case of a full native build -->
                        <linkPath>${native.lib.src.dir}</linkPath>
                        <linkPath>${native.lib.src.dir}/heu</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_libtom_libtommath/libtommath/lib</linkPath>
                        <!--<linkPath>${project.basedir}/../bazel/third_party/lib</linkPath>
                        <linkPath>${native.lib.external.dir}/com_dtera_heu</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_blake3team_blake3</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_fmtlib_fmt</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_gabime_spdlog</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_gflags_gflags</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_google_benchmark</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_herumi_mcl</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_libsodium</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_libtom_libtommath</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_microsoft_FourQlib</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_msgpack_msgpack</linkPath>
                        <linkPath>${native.lib.external.dir}/com_github_openssl_openssl</linkPath>
                        <linkPath>${native.lib.external.dir}/com_google_absl</linkPath>
                        <linkPath>${native.lib.external.dir}/com_google_googletest</linkPath>
                        <linkPath>${native.lib.external.dir}/com_google_protobuf</linkPath>
                        <linkPath>${native.lib.external.dir}/gmp</linkPath>
                        <linkPath>${native.lib.external.dir}/org_interconnection</linkPath>
                        <linkPath>${native.lib.external.dir}/yacl</linkPath>
                        <linkPath>${native.lib.external.dir}/zlib</linkPath>-->
                    </linkPaths>
                    <resourcePaths>
                        <resourcePath>${project.basedir}/../</resourcePath>
                    </resourcePaths>
                </configuration>
                <executions>
                    <!--
                      Validates the configuration of the JavaCPP plugin
                    -->
                    <execution>
                        <id>javacpp-validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!--
                          Generate TensorFlow C API binding sources
                            The plugin will parse the pre-compiled TensorFlow C API presets and generate
                            source classes for calling this API directly in Java.
                        -->
                        <id>javacpp-parser</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>parse</goal>
                        </goals>
                        <configuration>
                            <skip>${javacpp.generate.skip}</skip>
                            <outputDirectory>${project.basedir}/src/gen/java</outputDirectory>
                            <classOrPackageName>cn.cstn.algorithm.javacpp.*</classOrPackageName>
                        </configuration>
                    </execution>
                    <execution>
                        <!--
                        Compile JNI native code from this project
                          This code is used to call the Native C API right now but should be eventually
                          replaced by the usage of JavaCPP generated bindings
                        -->
                        <id>javacpp-compiler</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <configuration>
                            <skip>${javacpp.build.skip}</skip>
                            <!--deleteJniFiles>false</deleteJniFiles-->
                            <outputDirectory>
                                ${project.build.directory}/classes/cn/cstn/algorithm/javacpp/${native.classifier}/
                            </outputDirectory>
                            <classOrPackageName>cn.cstn.algorithm.javacpp.**</classOrPackageName>
                            <copyLibs>true</copyLibs>
                            <copyResources>true</copyResources>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.google.protobuf</groupId>
                        <artifactId>protobuf-java</artifactId>
                        <version>${protobuf.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>
