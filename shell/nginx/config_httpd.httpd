#! /bin/bash

HTTPROOT="/storage/www/httpd"

CERTDIR="/etc/httpd/conf.d/ssl.crt"
GENCERTSH=./gencert.sh

while :; do
   echo ""
   echo "This is an auto-configure script for apache http server (httpd)."
   echo ""
   echo "Now, you can:"
   echo ""
   echo "   0. Do nothing, just exit."
   echo "   1. Backup the original configuration."
   echo "   2. Reset the original configuration."
   echo "   3. Complete httpd basic configuration."
   echo "   4. Update httpd basic configuration."
   echo "   5. Create a httpd virtual host."
   echo "   6. Remove a httpd virtual host."
   echo "   7. Complete/Update ssl configuration."
   echo "   8. Update ssl certificate files."
   echo "   9. Complete web agent configuration."
   echo "   a. Update web agent configuration."
   echo ""
   echo -n "What do you want to do? [0,1,2,3,4,5,6,7,8,9,a] (0): "
   read choice
   if [ "$choice" == "1" ]; then
      echo ""
      echo "Backuping the original configuration..."
      cp -a /etc/httpd/conf/httpd.conf ./bkp/etc/httpd/conf/
      cp -a /etc/httpd/conf.d/ssl.conf ./bkp/etc/httpd/conf.d/
      echo "DONE."
   elif [ "$choice" == "2" ]; then
      echo ""
      echo "Resetting the original configuration..."

      cp ./bkp/etc/httpd/conf/httpd.conf /etc/httpd/conf/

      cp ./bkp/etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/
      rm -fr $CERTDIR

      #rm -f /etc/httpd/conf.d/proxy.conf

      rm -f /etc/httpd/conf.d/weblogic.conf
      rm -f /etc/httpd/modules/mod_wl_22.so

      echo ""
      echo "NOTE: please remember to handle www root directories $HTTPROOT manually."
      echo ""
      echo "DONE."
   elif [ "$choice" == "3" ]; then
      echo ""
      echo -n "Transferring httpd configuration files..."
      cp ./etc/httpd/conf/httpd.conf /etc/httpd/conf/
      echo "OK."
      if [ ! -d $HTTPROOT ]; then
         echo ""
         echo -n "Constructing www root directories in $HTTPROOT..."
         mkdir -p $HTTPROOT
         chown -R apache.apache $HTTPROOT
         echo "OK."
      fi

      echo ""
      echo "Set SELinux in permissive mode, in order that httpd server will have permission to access the www root directories..."
      echo -n "Set SELinux mode permanently..."
      sed -i "/^SELINUX=/ c\SELINUX=permissive" /etc/selinux/config
      echo "OK"
      echo -n "Change the current SELinux mode setting..."
      setenforce permissive
      echo "OK"

      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      chkconfig httpd on
      echo ""
      echo "DONE."
   elif [ "$choice" == "4" ]; then
      echo ""
      echo -n "Updating httpd configuration..."
      cp ./etc/httpd/conf/httpd.conf /etc/httpd/conf/
      echo "OK."
      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      echo ""
      echo "DONE."
   elif [ "$choice" == "5" ]; then
      echo ""
      echo "Creating a httpd virtual host..."
      echo -n "Type the httpd virtual host name to be created (blank spaces filtering): "
      read VHNAME
      VHNAME=$(echo $VHNAME | tr -d " ")
      if [ "$VHNAME" == "" ]; then
         echo "NULL input, the httpd virtual host will not created."
         echo "CANCEL."
         continue
      fi
      VHCFG=/etc/httpd/conf.d/vh_$VHNAME.conf
      #echo -n "Type the document root directory of the httpd virtual host: "
      #read VHROOT
      #VHROOT=$(echo $VHROOT | tr -d " ")
      VHROOT=$HTTPROOT/$VHNAME
      VHROOT_TMP=$(sed "s#\/#\\\\/#g" <<< "$VHROOT")
      if [ -f $VHCFG ] || [ -d $VHROOT ]; then
         echo "The named httpd virtual host is already existed."
         echo "CANCEL."
         continue
      else
         echo -n "Type the httpd virtual host IP (plz make sure the IP is up): "
         read VHIP
         VHIP=$(echo $VHIP | tr -d " ")
         echo -n "Transferring configuration file of the httpd virtual host..."
         cp -a etc/httpd/conf.d/vh.conf $VHCFG
         sed -i "s/\$VHIP/$VHIP/g" $VHCFG
         sed -i "s/\$VHROOT/$VHROOT_TMP/g" $VHCFG
         if [ ! -f $VHROOT/index.html ]; then
            mkdir -p $VHROOT
            cp -a etc/httpd/conf.d/vh_index.html $VHROOT/index.html
            sed -i "s/\$VHNAME/$VHNAME/g" $VHROOT/index.html
         fi
         echo "OK."
         echo "Now, restarting httpd server..."
         service httpd restart
         echo ""
         echo "DONE."
      fi
   elif [ "$choice" == "6" ]; then
      echo ""
      echo -n "Type the httpd virtual host name to be removed (blank spaces filtering): "
      read VHNAME
      VHNAME=$(echo $VHNAME | tr -d " ")
      if [ "$VHNAME" == "" ]; then
         echo "NULL input, the httpd virtual host will not removed."
         echo "CANCEL."
         continue
      fi
      VHCFG=/etc/httpd/conf.d/vh_$VHNAME.conf
      VHROOT=$HTTPROOT/$VHNAME
      if [ ! -f $VHCFG ] && [ ! -d $VHROOT ]; then
         echo "The named httpd virtual host is not existed."
         echo "CANCEL."
         continue
      else
         echo -n "Are you sure to remove the named httpd virtual host $VHNAME? [y,n] (n): "
         read subchoice
         if [ "$subchoice" == "y" ]; then
            echo -n "Deleting configuration file of the httpd virtual host..."
            rm -f $VHCFG
            echo "OK."
            echo -n "Do you want to remove the www root directories $VHROOT? [y,n] (n): "
            read subsubchoice
            if [ "$subsubchoice" == "y" ]; then
               echo -n "Deleting root directories of the httpd virtual host..."
               rm -fr $VHROOT
               echo "OK."
            fi
            echo "Now, restarting httpd server..."
            service httpd restart
            echo "" 
            echo "DONE."
         else
            echo "The named httpd virtual host is not removed."
            echo "CANCEL."
            continue
         fi
      fi
   elif [ "$choice" == "7" ]; then
      echo ""
      echo -n "Transferring SSL configuration..."
      cp ./etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/
      sed -i "/^SSLCertificateFile /c SSLCertificateFile $CERTDIR/ssl-server.crt" /etc/httpd/conf.d/ssl.conf
      sed -i "/^SSLCertificateKeyFile /c SSLCertificateKeyFile $CERTDIR/ssl-server.key" /etc/httpd/conf.d/ssl.conf
      echo "OK."

      if [ ! -d $CERTDIR ]; then
         echo ""
         echo "Generating SSL certificate files..."
         sh $GENCERTSH "HUST" $CERTDIR
      fi

      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      echo ""
      echo "DONE."
   elif [ "$choice" == "8" ]; then
      echo ""
      echo "Updating SSL certificate files..."
      sh $GENCERTSH "HUST" $CERTDIR

      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      echo ""
      echo "DONE."
   elif [ "$choice" == "9" ]; then
      echo ""
      echo -n "Transferring web agent configuration files..."
      #cp ./etc/httpd/conf.d/proxy.conf /etc/httpd/conf.d/
      cp ./etc/httpd/conf.d/weblogic.conf /etc/httpd/conf.d/
      echo "OK."

      echo ""
      echo -n "Is the operating system an x86_64 system or not? [y,n] (y): "
      read systype64
      echo -n "Install weblogic lib mod_wl_22.so to httpd modules directory..."
      if [ "$systype64" == "n" ]; then
         cp ./etc/httpd/modules/i686/mod_wl_22.so /etc/httpd/modules/ 
      else
         cp ./etc/httpd/modules/x86_64/mod_wl_22.so /etc/httpd/modules/ 
      fi
      echo "OK"

      echo ""
      echo "Set SELinux in permissive mode, in order that httpd server will have permission to load weblogic lib mod_wl_22.so..."
      echo -n "Set SELinux mode permanently..."
      sed -i "/^SELINUX=/ c\SELINUX=permissive" /etc/selinux/config
      echo "OK"
      echo -n "Change the current SELinux mode setting..."
      setenforce permissive
      echo "OK"

      echo ""
      echo "NOTE: Please make sure that the option \"WebLogicHost\" is properly configured in the link file /etc/httpd/conf.d/weblogic.conf, the default setting of weblogic server host address is localhost. If you modify the option, please remember to restart httpd server."
      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      echo ""
      echo "DONE."
   elif [ "$choice" == "a" ]; then
      echo ""
      echo -n "Updating web agent configuration files..."
      #cp ./etc/httpd/conf.d/proxy.conf /etc/httpd/conf.d/
      cp ./etc/httpd/conf.d/weblogic.conf /etc/httpd/conf.d/
      echo "OK."

      echo ""
      echo "Now, restarting httpd server..."
      service httpd restart
      echo ""
      echo "DONE."
   else
      echo ""
      echo "Do nothing, just exit the script..."
      echo "DONE."
      break
   fi
done
